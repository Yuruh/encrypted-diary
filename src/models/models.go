package models

import (
	"time"
)

type BaseModel struct{
	ID        uint `gorm:"primary_key" json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	DeletedAt *time.Time `sql:"index" json:"deleted_at"`
}

type User struct {
	BaseModel
	Email       string  `gorm:"type:varchar(100);unique_index" json:"email"`
	Password	string  `gorm:"not null" json:"-"`
	//	ApiAccess	ApiAccess `gorm:"foreignKey:UserID" json:",omitempty"`
}

/*
	The User modifiable part of Entry
 */
type PartialEntry struct {
	Content		string `json:"content" gorm:"type:varchar"`
	Title		string `json:"title" gorm:"type:varchar"`
}

/*
	The remaining data, generated by the server
 */
type Entry struct {
	BaseModel
	PartialEntry
}

/*
	This is my argument for inheritance:

	I want every model to have a Create and Update method that'll call Validate before.
	I should not have to code it for each model, but I don't see an other way without inheritance
 */
func (entry *Entry) Validate() error {
	return nil
}

func (entry *Entry) Create() error {
	return nil
}

func (entry *Entry) Update() error {
	return nil
}