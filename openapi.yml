components:
  parameters:
    Limit:
      name: limit
      in: query
      description: Number of items per page. Default to 5
      schema:
        type: integer
    Page:
      name: page
      in: query
      description: Current page. Starts at 1
      schema:
        type: integer
  responses: {}
  schemas:
    Pagination:
      type: object
      properties:
        limit:
          type: number
          example: 9
        has_next_page:
          type: boolean
          example: true
        has_prev_page:
          type: boolean
          example: true
        page:
          type: number
          example: 3
        next_page:
          type: number
          example: 4
        prev_page:
          type: number
          example: 2
        total_pages:
          type: number
          example: 210
        total_matches:
          type: number
          example: 24
    User:
      type: object
      properties:
        email:
          type: string
          format: "email"
    PartialEntry:
      type: object
      properties:
        date:
          type: string
          format: date
          description: "Format: YYYY-MM-DD"
        title:
          type: string
          maxLength: 500
        content:
          type: string
          description: "Diary Entry content. Encrypted. Markdown format."
        labels_id:
          type: array
          description: The IDs of labels associated to this entry. Unrecognized IDs will be ignored
          items:
            type: integer
            format: int64
    Entry:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        date:
          type: string
          format: date
          description: "Format: YYYY-MM-DD"
        title:
          type: string
          maxLength: 500
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        content:
          type: string
          description: "Diary Entry content. Encrypted. Markdown format."
    PartialLabel:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          format: alphanumeric
          description: Unique per user
        color:
          type: string
          format: hexcolor
    Label:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 100
          format: alphanumeric
        color:
          type: string
          format: hexcolor
  securitySchemes:
    Bearer Authentication:
      bearerFormat: JWT
      description: |-
        **For Web or Mobile clients**

        Request Headers must contain `Authorization: Bearer <access token>`
      scheme: bearer
      type: http
info:
  description: API Description
  title: Encrypted Diary API Specification
  version: 0.2.0
  x-logo:
    altText: Logo
    url: https://app.diary.yuruh.fr/logo512.png
openapi: 3.0.0
paths:
  /auth/two-factors/otp/register:
    post:
      tags:
        - Account
      operationId: regsiterOTP
      summary: OTP Registration
      description: Retrieve QR code to scan with your OTP application (e.g. Google Authenticator, LastPass Authenticator, ...)
      responses:
        200:
          description: The QR Code and the token to validate registration
          content:
            image/png:
              schema:
                type: string
                format: binary
  /auth/two-factors/otp/token:
    get:
      tags:
        - Account
      operationId: getTfaToken
      summary: GET 2FA Token
      description: Retrieve a jwt token to send with a two factors service registration
      responses:
        200:
          description: The token
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    format: jwt
  /auth/two-factors/otp/authenticate:
    post:
      summary: OTP Authentication
      description: >
        Using an external app like Google Authenticator or LastPass Authenticator.
        If it it called for the first time, it will validate OTP Registration
      security: []
      tags:
        - Account
      operationId: authenticateOTP
      requestBody:
        content:
          application/json:
            schema:
              required:
                - passcode
                - token
              properties:
                passcode:
                  type: string
                  example: 123456
                  description: The code displayed by the OTP app (always 6 numbers)
                token:
                  type: string
                  format: jwt
                  description: The token returned either during login or TFA service registration
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
        400:
          description: Bad Request. Either due to args format or refused code
        404:
          description: User not found
  /login:
    summary: Log in
    post:
      security: []
      tags:
        - Account
      operationId: login
      summary: Log in
      description: Exchange user / pwd for an access token
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: "email"
                password:
                  type: string
                  example: j0@EFA6jr6RDY
                session_duration_ms:
                  type: string
                  format: number
                  default: 1800000
                  description: Duration in milliseconds before token expires. Default 30 minutes. Maximum 1 hour.
                two_factors_cookie:
                  type: string
                  format: uuid
                  description: The uuid created when last granted 2FA access
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  two_factors_methods:
                    type: array
                    items:
                      type: string
                      enum:
                        - OTP
                        - SMS
                        - EMAIL
                    description: >
                      If the user fails to provide a valid 2FA cookie, an additional authentication method may be requested.
                      This array describes available methods
                  token:
                    type: string
                    description: >
                      The access token if `two_factors_methods` is empty. Otherwise this token must be sent to the 2FA
                      authentication method that the user chose
        400:
          description: Bad parameters
        404:
          description: User not found
  /register:
    summary: Create account
    post:
      security: []
      tags:
        - Account
      operationId: register
      summary: Create account
      description: "Password requirements: Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: "email"
                password:
                  type: string
      responses:
        201:
          description: Account created
          content:
            application/json:
              schema:
                properties:
                  user:
                    type: object
                    $ref: "#/components/schemas/User"
        400:
          description: Bad request
        409:
          description: User already exists
  /entries:
    summary: Diary entries
    get:
      tags:
        - Entries
      operationId: getEntries
      summary: Retrieve Entries
      parameters:
        - name: search
          in: query
          description: Search entry by title, label or date. Order by closest match.
          schema:
            type: string
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Page"

      responses:
        200:
          description: List all user entries
          content:
            application/json:
              schema:
                properties:
                  entries:
                    type: array
                    items:
                      $ref: "#/components/schemas/Entry"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
    post:
      tags:
        - Entries
      summary: Add an Entry
      operationId: addEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialEntry"
      responses:
        201:
          description: Entry successfully added
          content:
            application/json:
              schema:
                properties:
                  entry:
                    $ref: "#/components/schemas/Entry"
  /entries/{id}:
    summary: Diary entry
    get:
      tags:
        - Entries
      operationId: getEntry
      summary: Retrieve Entry
      responses:
        200:
          description: The entry
          content:
            application/json:
              schema:
                properties:
                  entry:
                    $ref: "#/components/schemas/Entry"
    put:
      tags:
        - Entries
      summary: Edit an Entry
      operationId: editEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialEntry"
      responses:
        200:
          description: Entry successfully edited
    delete:
      tags:
        - Entries
      summary: Delete an Entry
      operationId: deleteEntry
      responses:
        200:
          description: Entry successfully deleted
          content:
            application/json:
              schema:
                properties:
                  entry:
                    $ref: "#/components/schemas/Entry"
  /labels:
    get:
      tags:
        - Labels
      operationId: getLabels
      summary: Retrieve user labels
      responses:
        200:
          description: User labels
          content:
            application/json:
              schema:
                properties:
                  labels:
                    type: array
                    items:
                      $ref: "#/components/schemas/Label"
      parameters:
        - name: name
          in: query
          description: Label name for auto-completion
          schema:
            type: string
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Page"
    post:
      tags:
        - Labels
      operationId: addLabel
      summary: Add a user label
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialLabel"
      responses:
        201:
          description: Label created
          content:
            application/json:
              schema:
                properties:
                  label:
                    $ref: "#/components/schemas/Label"
        400:
          description: Bad request
        409:
          description: Name already exists
  /labels/{id}:
    summary: User label
    put:
      tags:
        - Labels
      summary: Edit a label
      operationId: editLabel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialLabel"
      responses:
        200:
          description: Label successfully edited
          content:
            application/json:
              schema:
                properties:
                  label:
                    $ref: "#/components/schemas/Label"
    delete:
      tags:
        - Labels
      summary: Delete a Label
      operationId: deleteLabel
      responses:
        200:
          description: Label successfully deleted
security:
  - Bearer Authentication: []
servers:
  - url: https://api.diary.yuruh.fr
tags:
  - name: Entries
    description: Operations about diary entries
  - name: Labels
    description: Manipulate labels to easily find entries